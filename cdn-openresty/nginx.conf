log_subrequest on;
error_log  /dev/stderr debug;
rewrite_log on;
lua_package_path "/usr/local/openresty/lualib/resty/?.lua;;";
server {
    listen 80;

    access_log  /dev/stdout;
    resolver 192.168.2.2;

    location / {
        default_type 'text/html';
        content_by_lua_block {
            ngx.say("Hello, World!")
        }
    }

    location ~* ^/image/(.+)$ {
        default_type 'image/png';
        root /fsimages;

        # FIXME remove image as there should be no need for it
        set $image_base_path '/fsimages/image';

        set $image_with_ext '/image/$1.png';
        try_files $image_with_ext @fetch;
    }

    location @fetch {
        content_by_lua_block {
            local http = require "resty.http"
            local httpc = http.new()

            # FIXME replace with local uuid var
            local api_url = "https://imagegen.wreiner.at/egress/download-image/" .. ngx.var.uri:gsub("/image/", "")

            local res, err = httpc:request_uri(api_url, {
                method = "GET",
                ssl_verify = false,
            })

            if not res then
                ngx.log(ngx.ERR, "Failed to fetch image: ", err)
                return ngx.exit(404)
            end

            if res.status == 200 then
                local uuid = ngx.var.uri:gsub("/image/", "")
                ngx.log(ngx.ERR, "Fetching image with UUID: ", uuid)

                # FIXME replace with ngx.vars.uri?
                local fileurl = "/image/" .. uuid

                local filename = ngx.var.image_base_path .. "/" .. uuid .. ".png"
                ngx.log(ngx.ERR, "Saving image to: ", filename)

                local file = io.open(filename, "w+b")
                if file then
                    file:write(res.body)
                    file:close()
                    ngx.exec(fileurl)
                else
                    ngx.log(ngx.ERR, "Failed to save image")
                    return ngx.exit(500)
                end
            else
                return ngx.exit(404)
            end
        }
    }
}


